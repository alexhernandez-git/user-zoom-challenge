{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useQuery } from \"react-query\";\nimport { useSetRecoilState } from \"recoil\";\nimport usersState from \"../state/usersState\";\n\nconst useGetUsers = function () {\n  _s();\n\n  let {\n    results = 50,\n    nationalities = [],\n    search = \"\"\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const setUsers = useSetRecoilState(usersState);\n  console.warn(`https://randomuser.me/api/?results=${results}&nat=${nationalities.join(\",\")}`);\n  const {\n    isLoading,\n    error,\n    data\n  } = useQuery([\"randomUsersData\", results, search, nationalities], () => axios.get(`https://randomuser.me/api/?results=${results}&nat=${nationalities.join(\",\")}`).then(res => search ? { ...res.data,\n    results: res.data.results.filter(user => user.name.first.includes(search) || user.name.last.includes(search))\n  } : res.data).catch(err => err.response));\n\n  if (isLoading) {\n    setUsers(users => {\n      return { ...users,\n        loading: true,\n        error: error\n      };\n    });\n  } else {\n    if (error) setUsers({ ...data,\n      loading: false,\n      error: error\n    });else setUsers({ ...data,\n      loading: false,\n      error: null\n    });\n  }\n};\n\n_s(useGetUsers, \"E+Ioi+GQxOJn3Rog+AYo1MlBgkM=\", false, function () {\n  return [useSetRecoilState, useQuery];\n});\n\nexport default useGetUsers;","map":{"version":3,"sources":["/Users/alexhernandezprat/code/satoshis-tech-test/src/hooks/useGetUsers.ts"],"names":["axios","useQuery","useSetRecoilState","usersState","useGetUsers","results","nationalities","search","setUsers","console","warn","join","isLoading","error","data","get","then","res","filter","user","name","first","includes","last","catch","err","response","users","loading"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,iBAAT,QAAkC,QAAlC;AACA,OAAOC,UAAP,MAAuB,qBAAvB;;AASA,MAAMC,WAAW,GAAG,YAIa;AAAA;;AAAA,MAJZ;AACnBC,IAAAA,OAAO,GAAG,EADS;AAEnBC,IAAAA,aAAa,GAAG,EAFG;AAGnBC,IAAAA,MAAM,GAAG;AAHU,GAIY,uEAAP,EAAO;AAC/B,QAAMC,QAAQ,GAAGN,iBAAiB,CAACC,UAAD,CAAlC;AACAM,EAAAA,OAAO,CAACC,IAAR,CACG,sCAAqCL,OAAQ,QAAOC,aAAa,CAACK,IAAd,CACnD,GADmD,CAEnD,EAHJ;AAKA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA;AAApB,MAA6Bb,QAAQ,CACzC,CAAC,iBAAD,EAAoBI,OAApB,EAA6BE,MAA7B,EAAqCD,aAArC,CADyC,EAEzC,MACEN,KAAK,CACFe,GADH,CAEK,sCAAqCV,OAAQ,QAAOC,aAAa,CAACK,IAAd,CACnD,GADmD,CAEnD,EAJN,EAMGK,IANH,CAMSC,GAAD,IACJV,MAAM,GACF,EACE,GAAGU,GAAG,CAACH,IADT;AAEET,IAAAA,OAAO,EAAEY,GAAG,CAACH,IAAJ,CAAST,OAAT,CAAiBa,MAAjB,CACNC,IAAD,IACEA,IAAI,CAACC,IAAL,CAAUC,KAAV,CAAgBC,QAAhB,CAAyBf,MAAzB,KACAY,IAAI,CAACC,IAAL,CAAUG,IAAV,CAAeD,QAAf,CAAwBf,MAAxB,CAHK;AAFX,GADE,GASFU,GAAG,CAACH,IAhBZ,EAkBGU,KAlBH,CAkBUC,GAAD,IAASA,GAAG,CAACC,QAlBtB,CAHuC,CAA3C;;AAwBA,MAAId,SAAJ,EAAe;AACbJ,IAAAA,QAAQ,CAAEmB,KAAD,IAAW;AAClB,aAAO,EAAE,GAAGA,KAAL;AAAYC,QAAAA,OAAO,EAAE,IAArB;AAA2Bf,QAAAA,KAAK,EAAEA;AAAlC,OAAP;AACD,KAFO,CAAR;AAGD,GAJD,MAIO;AACL,QAAIA,KAAJ,EAAWL,QAAQ,CAAC,EAAE,GAAGM,IAAL;AAAWc,MAAAA,OAAO,EAAE,KAApB;AAA2Bf,MAAAA,KAAK,EAAEA;AAAlC,KAAD,CAAR,CAAX,KACKL,QAAQ,CAAC,EAAE,GAAGM,IAAL;AAAWc,MAAAA,OAAO,EAAE,KAApB;AAA2Bf,MAAAA,KAAK,EAAE;AAAlC,KAAD,CAAR;AACN;AACF,CA3CD;;GAAMT,W;UAKaF,iB,EAMkBD,Q;;;AAkCrC,eAAeG,WAAf","sourcesContent":["import axios from \"axios\";\nimport { useEffect } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { useSetRecoilState } from \"recoil\";\nimport usersState from \"../state/usersState\";\nimport { UserType } from \"../types\";\n\ninterface UseGetUsersInterface {\n  results?: number;\n  nationalities?: string[];\n  search?: string;\n}\n\nconst useGetUsers = ({\n  results = 50,\n  nationalities = [],\n  search = \"\",\n}: UseGetUsersInterface = {}) => {\n  const setUsers = useSetRecoilState(usersState);\n  console.warn(\n    `https://randomuser.me/api/?results=${results}&nat=${nationalities.join(\n      \",\"\n    )}`\n  );\n  const { isLoading, error, data } = useQuery(\n    [\"randomUsersData\", results, search, nationalities],\n    () =>\n      axios\n        .get(\n          `https://randomuser.me/api/?results=${results}&nat=${nationalities.join(\n            \",\"\n          )}`\n        )\n        .then((res) =>\n          search\n            ? {\n                ...res.data,\n                results: res.data.results.filter(\n                  (user: UserType) =>\n                    user.name.first.includes(search) ||\n                    user.name.last.includes(search)\n                ),\n              }\n            : res.data\n        )\n        .catch((err) => err.response)\n  );\n\n  if (isLoading) {\n    setUsers((users) => {\n      return { ...users, loading: true, error: error };\n    });\n  } else {\n    if (error) setUsers({ ...data, loading: false, error: error });\n    else setUsers({ ...data, loading: false, error: null });\n  }\n};\n\nexport default useGetUsers;\n"]},"metadata":{},"sourceType":"module"}