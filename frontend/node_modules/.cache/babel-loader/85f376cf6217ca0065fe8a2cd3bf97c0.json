{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useEffect } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { useSetRecoilState } from \"recoil\";\nimport usersState from \"../state/usersState\";\n\nconst useGetRepos = function () {\n  _s();\n\n  let {\n    results = 50,\n    nationalities = [],\n    page = 1\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const setUsers = useSetRecoilState(usersState);\n  const {\n    isLoading,\n    error,\n    data\n  } = useQuery([\"randomUsersData\", results, nationalities, page], () => axios.get(`https://api.github.com/orgs/ORG/repos`, {\n    headers: {\n      auth: \"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\"\n    }\n  }).then(res => res.data).catch(err => err.response));\n  useEffect(() => {\n    if (isLoading) {\n      setUsers(users => {\n        return { ...users,\n          loading: true,\n          error: error\n        };\n      });\n    } else {\n      if (error) setUsers({ ...data,\n        loading: false,\n        error: error\n      });else {\n        if (page === 1) {\n          setUsers({ ...data,\n            loading: false,\n            error: null\n          });\n        } else {\n          setUsers(users => ({ ...users,\n            ...data,\n            results: [...users.results, ...data.results],\n            loading: false,\n            error: null\n          }));\n        }\n      }\n    }\n  }, [isLoading]);\n};\n\n_s(useGetRepos, \"tlxA0jLIeIJbGwvVMze3MIYSmSI=\", false, function () {\n  return [useSetRecoilState, useQuery];\n});\n\nexport default useGetRepos;","map":{"version":3,"sources":["/Users/alexhernandezprat/code/user-zoom-challenge/frontend/src/hooks/useGetRepos.ts"],"names":["axios","useEffect","useQuery","useSetRecoilState","usersState","useGetRepos","results","nationalities","page","setUsers","isLoading","error","data","get","headers","auth","then","res","catch","err","response","users","loading"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,iBAAT,QAAkC,QAAlC;AACA,OAAOC,UAAP,MAAuB,qBAAvB;;AASA,MAAMC,WAAW,GAAG,YAIa;AAAA;;AAAA,MAJZ;AACnBC,IAAAA,OAAO,GAAG,EADS;AAEnBC,IAAAA,aAAa,GAAG,EAFG;AAGnBC,IAAAA,IAAI,GAAG;AAHY,GAIY,uEAAP,EAAO;AAC/B,QAAMC,QAAQ,GAAGN,iBAAiB,CAACC,UAAD,CAAlC;AAEA,QAAM;AAAEM,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA;AAApB,MAA6BV,QAAQ,CACzC,CAAC,iBAAD,EAAoBI,OAApB,EAA6BC,aAA7B,EAA4CC,IAA5C,CADyC,EAEzC,MACER,KAAK,CACFa,GADH,CACQ,uCADR,EACgD;AAC5CC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR;AADmC,GADhD,EAIGC,IAJH,CAISC,GAAD,IAASA,GAAG,CAACL,IAJrB,EAKGM,KALH,CAKUC,GAAD,IAASA,GAAG,CAACC,QALtB,CAHuC,CAA3C;AAWAnB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,SAAJ,EAAe;AACbD,MAAAA,QAAQ,CAAEY,KAAD,IAA2B;AAClC,eAAO,EAAE,GAAGA,KAAL;AAAYC,UAAAA,OAAO,EAAE,IAArB;AAA2BX,UAAAA,KAAK,EAAEA;AAAlC,SAAP;AACD,OAFO,CAAR;AAGD,KAJD,MAIO;AACL,UAAIA,KAAJ,EAAWF,QAAQ,CAAC,EAAE,GAAGG,IAAL;AAAWU,QAAAA,OAAO,EAAE,KAApB;AAA2BX,QAAAA,KAAK,EAAEA;AAAlC,OAAD,CAAR,CAAX,KACK;AACH,YAAIH,IAAI,KAAK,CAAb,EAAgB;AACdC,UAAAA,QAAQ,CAAC,EAAE,GAAGG,IAAL;AAAWU,YAAAA,OAAO,EAAE,KAApB;AAA2BX,YAAAA,KAAK,EAAE;AAAlC,WAAD,CAAR;AACD,SAFD,MAEO;AACLF,UAAAA,QAAQ,CAAEY,KAAD,KAA4B,EACnC,GAAGA,KADgC;AAEnC,eAAGT,IAFgC;AAGnCN,YAAAA,OAAO,EAAE,CAAC,GAAGe,KAAK,CAACf,OAAV,EAAmB,GAAGM,IAAI,CAACN,OAA3B,CAH0B;AAInCgB,YAAAA,OAAO,EAAE,KAJ0B;AAKnCX,YAAAA,KAAK,EAAE;AAL4B,WAA5B,CAAD,CAAR;AAOD;AACF;AACF;AACF,GArBQ,EAqBN,CAACD,SAAD,CArBM,CAAT;AAsBD,CAxCD;;GAAML,W;UAKaF,iB,EAEkBD,Q;;;AAmCrC,eAAeG,WAAf","sourcesContent":["import axios from \"axios\";\nimport { useEffect } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { useSetRecoilState } from \"recoil\";\nimport usersState from \"../state/usersState\";\nimport { UsersInterface } from \"../types\";\n\ninterface UseGetUsersInterface {\n  results?: number;\n  nationalities?: string[];\n  page?: number;\n}\n\nconst useGetRepos = ({\n  results = 50,\n  nationalities = [],\n  page = 1,\n}: UseGetUsersInterface = {}) => {\n  const setUsers = useSetRecoilState(usersState);\n\n  const { isLoading, error, data } = useQuery(\n    [\"randomUsersData\", results, nationalities, page],\n    () =>\n      axios\n        .get(`https://api.github.com/orgs/ORG/repos`, {\n          headers: { auth: \"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\" },\n        })\n        .then((res) => res.data)\n        .catch((err) => err.response)\n  );\n\n  useEffect(() => {\n    if (isLoading) {\n      setUsers((users: UsersInterface) => {\n        return { ...users, loading: true, error: error };\n      });\n    } else {\n      if (error) setUsers({ ...data, loading: false, error: error });\n      else {\n        if (page === 1) {\n          setUsers({ ...data, loading: false, error: null });\n        } else {\n          setUsers((users: UsersInterface) => ({\n            ...users,\n            ...data,\n            results: [...users.results, ...data.results],\n            loading: false,\n            error: null,\n          }));\n        }\n      }\n    }\n  }, [isLoading]);\n};\n\nexport default useGetRepos;\n"]},"metadata":{},"sourceType":"module"}